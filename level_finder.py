import json

with open("/mnt/data/combined_sport_position_stat.json") as f:
    combined_sport_position_stat = json.load(f)

# Generate Streamlit script with dynamic logic
dynamic_script_lines = [
    "import streamlit as st",
    "import requests",
    "",
    "st.set_page_config(page_title='Level Finder GPT', page_icon='🏅', layout='centered')",
    "",
    "st.markdown(\"\"\"",
    "    <style>",
    "    .title { text-align: center; font-size: 36px; font-weight: bold; margin-bottom: 10px; }",
    "    .subtitle { text-align: center; font-size: 18px; color: #555; margin-bottom: 20px; }",
    "    </style>",
    "\"\"\", unsafe_allow_html=True)",
    "",
    "st.markdown(\"<div class='title'>🎯 Level Finder GPT</div>\", unsafe_allow_html=True)",
    "st.markdown(\"<div class='subtitle'>Find your most realistic college playing level — powered by AI</div>\", unsafe_allow_html=True)",
    "",
    "is_d1_check = st.toggle(\"🧠 Am I D1? Self-Check Mode\")",
    "",
    "# Combined structure for sports, positions, and stats",
    "combined_data = " + json.dumps(combined_sport_position_stat, indent=2),
    "",
    "sports = list(combined_data.keys())",
    "sport = st.selectbox(\"Sport\", sports)",
    "positions = list(combined_data[sport].keys())",
    "position = st.selectbox(\"Primary Position\", positions)",
    "",
    "with st.form(\"level_finder_form\"):",
    "    name = st.text_input(\"Student-Athlete Name\")",
    "    gpa = st.text_input(\"GPA\", \"3.8\")",
    "    age = st.text_input(\"Age\", \"17\")",
    "    height = st.text_input(\"Height (e.g., 6'2\\\")\", \"6'2\")",
    "    weight = st.text_input(\"Weight (e.g., 180 lbs)\", \"180 lbs\")",
    "    experience = st.text_input(\"Athletic Experience\", \"4 years varsity\")",
    "",
    "    st.markdown(\"**📊 Enter Stat Details Below:**\")",
    "    stat_inputs = {}",
    "    for stat_label in combined_data[sport][position]:",
    "        stat_inputs[stat_label] = st.text_input(stat_label)",
    "",
    "    activity = st.text_input(\"Recruiting Activity\", \"Daily training, highlight video posted, contacted 5 coaches\")",
    "    submit = st.form_submit_button(\"🎓 Evaluate My Level\")",
    "",
    "if submit:",
    "    with st.spinner(\"Evaluating your recruiting level...\"):",
    "        try:",
    "            payload = {",
    "                \"name\": name,",
    "                \"sport\": sport,",
    "                \"gpa\": gpa,",
    "                \"age\": age,",
    "                \"height\": height,",
    "                \"weight\": weight,",
    "                \"experience\": experience,",
    "                \"position\": position,",
    "                \"stats\": stat_inputs,",
    "                \"activity\": activity,",
    "                \"d1_check\": is_d1_check",
    "            }",
    "",
    "            response = requests.post(\"https://ftp-gpt.streamlit.app/api/level-finder\", json=payload)",
    "            result = response.json()",
    "",
    "            if result.get(\"success\"):",
    "                st.success(\"✅ Evaluation Complete\")",
    "                st.markdown(\"### 🧾 Recommendation Summary\")",
    "                st.markdown(f\"**🎓 Recommended Level:** {result['level']}\")",
    "                st.markdown(f\"**📌 Reason:** {result['reason']}\")",
    "                st.markdown(\"**📈 Action Steps:**\")",
    "                for step in result.get(\"actions\", []):",
    "                    st.markdown(f\"- {step}\")",
    "                st.markdown(f\"**🧠 Summary:** {result['summary']}\")",
    "                st.markdown(f\"**📅 Timestamp:** {result['timestamp']}\")",
    "",
    "                with st.expander(\"📋 Full Input Log\"):",
    "                    st.text(f\"Name: {name}\")",
    "                    st.text(f\"Sport: {sport}\")",
    "                    st.text(f\"Position: {position}\")",
    "                    st.text(f\"GPA: {gpa}\")",
    "                    st.text(f\"Age: {age}\")",
    "                    st.text(f\"Height: {height}\")",
    "                    st.text(f\"Weight: {weight}\")",
    "                    st.text(f\"Experience: {experience}\")",
    "                    for k, v in stat_inputs.items():",
    "                        st.text(f\"{k}: {v}\")",
    "                    st.text(f\"Activity: {activity}\")",
    "                    st.text(f\"D1 Mode: {'Yes' if is_d1_check else 'No'}\")",
    "            else:",
    "                st.error(f\"❌ Error: {result.get('error', 'Unknown error')}\")",
    "                st.text(result.get(\"rawOutput\", \"No raw output returned.\"))",
    "",
    "        except Exception as e:",
    "            st.error(f\"Exception occurred: {str(e)}\")"
]

# Save updated Streamlit app to file
final_combined_path = "/mnt/data/final_streamlit_level_finder_combined.py"
with open(final_combined_path, "w") as f:
    f.write("\n".join(dynamic_script_lines))
